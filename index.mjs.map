{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport format from '@stdlib/string-format';\nimport base from '@stdlib/string-base-code-point-at';\n\n\n// MAIN //\n\n/**\n* Returns a Unicode code point from a string at a specified position.\n*\n* @param {string} str - input string\n* @param {integer} idx - position\n* @param {boolean} [backward=false] - backward iteration for low surrogates\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be a boolean\n* @throws {RangeError} position must be a valid index in string\n* @returns {NonNegativeInteger} code point\n*\n* @example\n* var out = codePointAt( 'last man standing', 4 );\n* // returns 32\n*\n* @example\n* var out = codePointAt( 'presidential election', 8, true );\n* // returns 116\n*\n* @example\n* var out = codePointAt( '‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶', 2 );\n* // returns 2369\n*\n* @example\n* var out = codePointAt( 'üå∑', 1, true );\n* // returns 127799\n*/\nfunction codePointAt( str, idx, backward ) {\n\tvar FLG;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx < 0 ) {\n\t\tidx += str.length;\n\t}\n\tif ( idx < 0 || idx >= str.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a valid position (i.e., be within string bounds). Value: `%d`.', idx ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isBoolean( backward ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a boolean. Value: `%s`.', backward ) );\n\t\t}\n\t\tFLG = backward;\n\t} else {\n\t\tFLG = false;\n\t}\n\treturn base( str, idx, FLG );\n}\n\n\n// EXPORTS //\n\nexport default codePointAt;\n"],"names":["codePointAt","str","idx","backward","FLG","isString","TypeError","format","isInteger","length","RangeError","arguments","isBoolean","base"],"mappings":";;4fA2DA,SAASA,EAAaC,EAAKC,EAAKC,GAC/B,IAAIC,EAEJ,IAAMC,EAAUJ,GACf,MAAM,IAAIK,UAAWC,EAAQ,kEAAmEN,IAEjG,IAAMO,EAAWN,GAChB,MAAM,IAAII,UAAWC,EAAQ,qEAAsEL,IAKpG,GAHKA,EAAM,IACVA,GAAOD,EAAIQ,QAEPP,EAAM,GAAKA,GAAOD,EAAIQ,OAC1B,MAAM,IAAIC,WAAYH,EAAQ,2GAA4GL,IAE3I,GAAKS,UAAUF,OAAS,EAAI,CAC3B,IAAMG,EAAWT,GAChB,MAAM,IAAIG,UAAWC,EAAQ,mEAAoEJ,IAElGC,EAAMD,CACR,MACEC,GAAM,EAEP,OAAOS,EAAMZ,EAAKC,EAAKE,EACxB"}