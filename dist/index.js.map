{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar base = require( '@stdlib/string-base-code-point-at' );\n\n\n// MAIN //\n\n/**\n* Returns a Unicode code point from a string at a specified position.\n*\n* @param {string} str - input string\n* @param {integer} idx - position\n* @param {boolean} [backward=false] - backward iteration for low surrogates\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be a boolean\n* @throws {RangeError} position must be a valid index in string\n* @returns {NonNegativeInteger} code point\n*\n* @example\n* var out = codePointAt( 'last man standing', 4 );\n* // returns 32\n*\n* @example\n* var out = codePointAt( 'presidential election', 8, true );\n* // returns 116\n*\n* @example\n* var out = codePointAt( '\u0905\u0928\u0941\u091A\u094D\u091B\u0947\u0926', 2 );\n* // returns 2369\n*\n* @example\n* var out = codePointAt( '\uD83C\uDF37', 1, true );\n* // returns 127799\n*/\nfunction codePointAt( str, idx, backward ) {\n\tvar FLG;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx < 0 ) {\n\t\tidx += str.length;\n\t}\n\tif ( idx < 0 || idx >= str.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a valid position (i.e., be within string bounds). Value: `%d`.', idx ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isBoolean( backward ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a boolean. Value: `%s`.', backward ) );\n\t\t}\n\t\tFLG = backward;\n\t} else {\n\t\tFLG = false;\n\t}\n\treturn base( str, idx, FLG );\n}\n\n\n// EXPORTS //\n\nmodule.exports = codePointAt;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a Unicode code point from a string at a specified position.\n*\n* @module @stdlib/string-code-point-at\n*\n* @example\n* var codePointAt = require( '@stdlib/string-code-point-at' );\n*\n* var out = codePointAt( '\u0905\u0928\u0941\u091A\u094D\u091B\u0947\u0926', 2 );\n* // returns 2369\n*\n* out = codePointAt( '\uD83C\uDF37', 1, true );\n* // returns 127799\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAO,QAAS,mCAAoC,EAiCxD,SAASC,EAAaC,EAAKC,EAAKC,EAAW,CAC1C,IAAIC,EAEJ,GAAK,CAACR,EAAUK,CAAI,EACnB,MAAM,IAAI,UAAWH,EAAQ,kEAAmEG,CAAI,CAAE,EAEvG,GAAK,CAACJ,EAAWK,CAAI,EACpB,MAAM,IAAI,UAAWJ,EAAQ,qEAAsEI,CAAI,CAAE,EAK1G,GAHKA,EAAM,IACVA,GAAOD,EAAI,QAEPC,EAAM,GAAKA,GAAOD,EAAI,OAC1B,MAAM,IAAI,WAAYH,EAAQ,2GAA4GI,CAAI,CAAE,EAEjJ,GAAK,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACP,EAAWQ,CAAS,EACzB,MAAM,IAAI,UAAWL,EAAQ,mEAAoEK,CAAS,CAAE,EAE7GC,EAAMD,CACP,MACCC,EAAM,GAEP,OAAOL,EAAME,EAAKC,EAAKE,CAAI,CAC5B,CAKAV,EAAO,QAAUM,ICnDjB,IAAIK,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isBoolean", "isString", "isInteger", "format", "base", "codePointAt", "str", "idx", "backward", "FLG", "main"]
}
